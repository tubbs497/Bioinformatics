dna.seqs <-readDNAStringSet("input/sequences.fasta",
format = "fasta")
##install/load packages
pacman::p_load(msa,genepop,seqinr,Biostrings,tidyverse,phangorn)
dna.seqs <-readDNAStringSet("input/sequences.fasta",
format = "fasta")
alignment1 <- msa(dna.seqs, method = "ClustalW")
?msa
print(alignment1)
print(alignment1, show = "complete")
alFreq <- alphabetFrequency(alignment1)
alFreq
#does
nchar(alignment1)
nchar(alignment1$[20])
nchar(alignment1[20,])
hs1 <- alignment1[3]
dna.seqs
hs1 <- dna.seqs[1]
hs1
#take the mutation sequence and make it an object
hs6 <- dna.seq[6]
#take the mutation sequence and make it an object
hs6 <- dna.seqs[6]
hs6
##convert to fasta file for exporting for blast search
hs1_Dat = msaConvert(hs1, type="phangorn::phyDat")
##exporting fasta file for blast search
write.fasta(hs1, file.out = "output/hs1.fasta")
##exporting fasta file for blast search
write.fasta(hs1, names = names(hs1), file.out = "output/hs1.fasta")
?translate
?Translate
hs6.aa <- translate(hs6)
#Calcuate distance matrix between the aligned sequences
aln1 <- msaConvert(alignment1, type="seqinr::alignment")
d <- dist.alignment(aln1, "identity")
d
hs6.aa <- Biostrings::translate(hs6)
View(hs6.aa)
print(hs6.aa)
#export amino acid sequence to fasta
write.fasta(hs6.aa, names = names(hs6.aa), file.out = "output/hs6_aa.fasta")
aa1 <- ("A0A0J9YWK4")
##install/load packages
pacman::p_load(msa,genepop,seqinr,Biostrings,tidyverse,phangorn,UniprotR)
aa1.go = GetProteinGOInfo(aa1)
aa.1.path = GetPathology_Biotech(aa1.go)
print(hs6.aa)
