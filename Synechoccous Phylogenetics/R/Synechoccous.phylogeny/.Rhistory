a1.sr = msaConvert(a1,"seqinr::alignment")
#calculate identity disatnce
a1.dist = dist.alignment(a1.sr,"identity")
ai.dist.mat = as.matrix(a1.dist)#out groups highest percent
##convert to fasta file
A1_Dat = msaConvert(a1, type="phangorn::phyDat")
write.phyDat(A1_Dat, "picocyano.msa.v2.phy", format = "phylip")
tree.1 <-read.tree(file = "RAxML_bestTree.picocyano.msa.v2_tree_1.tre")
ggtree(tree)
library(ggtree)
ggtree(tree)
ggtree(tree.1)
tree.1 <-read.tree(file = "RAxML_bipartitionsBranchLabels.picocyano.msa.v2_tree_1.tre")
ggtree(tree.1)
ggplot(tree.1, aes(x, y)) + geom_tree() + theme_tree()
BiocManager::install("treeio")
pico.seqs <- Biostrings::readDNAStringSet("/Users/trevo/OneDrive/Documents/GitHub/Bioinformatics/Synechoccous Phylogenetics/R/Synechoccous.phylogeny/picocyano.rep.seqs_q2.v2.txt",
format = "fasta",
use.names = TRUE)
a1 <- msa(pico.seqs, method = "Muscle")
##convert to fasta file
A1_Dat = msaConvert(a1, type="phangorn::phyDat")
write.phyDat(A1_Dat, "picocyano.msa.v3.phy", format = "phylip")
pico.seqs <- Biostrings::readDNAStringSet("/Users/trevo/OneDrive/Documents/GitHub/Bioinformatics/Synechoccous Phylogenetics/R/Synechoccous.phylogeny/picocyano.rep.seqs_q2.v2.txt",
format = "fasta",
use.names = TRUE)
a1 <- msa(pico.seqs, method = "Muscle")
##convert to fasta file
A1_Dat = msaConvert(a1, type="phangorn::phyDat")
write.phyDat(A1_Dat, "picocyano.msa.v3.phy", format = "phylip")
pico.seqs <- Biostrings::readDNAStringSet("/Users/trevo/OneDrive/Documents/GitHub/Bioinformatics/Synechoccous Phylogenetics/R/Synechoccous.phylogeny/picocyano.rep.seqs_q2.v3.txt",
format = "fasta",
use.names = TRUE)
a1 <- msa(pico.seqs, method = "Muscle")
##convert to fasta file
A1_Dat = msaConvert(a1, type="phangorn::phyDat")
write.phyDat(A1_Dat, "picocyano.msa.v3.1.phy", format = "phylip")
library(ggtree)
library(treeio)
tree <-read.raxml(file = "RAxML_bipartitions.picocyano.msa.v3_1.tre")
tree <-read.raxml(file = "RAxML_bipartitionsBranchLabels.picocyano.msa.v3_1.tre")
ggplot(tree, aes(x, y)) + geom_tree() + theme_tree()
tree <-read.raxml(file = "RAxML_bipartitionsBranchLabels.picocyano.msa.v3_1.tre")
ggplot(tree, aes(x, y)) + geom_tree() + theme_tree()
View(tree)
tree@phylo
nwk <- system.file("extdata", "sample.nwk", package="treeio")
tree <- read.tree(nwk)
tree.rax <-read.raxml(file = "RAxML_bipartitionsBranchLabels.picocyano.msa.v3_1.tre")
tree <- read.tree(nwk)
ggplot(tree, aes(x, y)) + geom_tree() + theme_tree()
ggtree(tree, color="firebrick", size=2, linetype="dotted")
ggtree(tree, ladderize=FALSE)
ggtree(tree)
ggtree(tree, ladderize=FALSE)
ggtree(tree)
ggtree(tree, ladderize=FALSE)#
ggtree(tree, branch.length="none")
ggtree(tree)
ggtree(tree, branch.length="none")
ggtree(tree) + geom_treescale()
ggtree(tree) +
geom_point(aes(shape=isTip, color=isTip), size=3)
p <- ggtree(tree) +
geom_nodepoint(color="#b5e521", alpha=1/4, size=10)
p + geom_tippoint(color="#FDAC4F", shape=8, size=3)
p <- ggtree(tree) +
geom_nodepoint(color="#b5e521", alpha=1/4, size=10)
p
p + geom_tippoint(color="#FDAC4F", shape=8, size=3)
p + geom_tiplab(size=3, color="purple")
ggtree(tree.rax)+geom_tiplab2(size=3, color="red")
ggtree(tree, layout="circular") + geom_tiplab(aes(angle=angle), color='blue')
ggtree(tree.rax, layout="circular") + geom_tiplab(aes(angle=angle), color='blue')
ggtree(tree.rax)+geom_tiplab2(aes(x = branch), size = 2, color = "lightblue")
ggtree(tree.rax, layout="circular") + geom_tiplab(aes(angle=angle), color='blue')
ggtree(tree.rax, layout="circular") + geom_tiplab(aes(angle=angle), color='blue')+geom_rootedge()
tree.rax.1 <- read.tree(file = "RAxML_bipartitionsBranchLabels.picocyano.msa.v2_tree_1.tre")
View(tree.rax.1)
ggtree(beast_tree, aes(color=rate)) +
scale_color_continuous(low='darkgreen', high='red') +
theme(legend.position="right")
#highlighting specific clades
ggtree(tree) +
geom_hilight(node=21, fill="steelblue", alpha=.6) +
geom_hilight(node=17, fill="darkgreen", alpha=.6)
ggtree(tree, layout="circular") +
geom_hilight(node=21, fill="steelblue", alpha=.6) +
geom_hilight(node=23, fill="darkgreen", alpha=.6)
tree$edge
ggtree(tree, layout="circular") +
geom_hilight(node=21, fill="steelblue", alpha=.6) +
geom_hilight(node=23, fill="darkgreen", alpha=.6,type = "encircle")
#highlighting specific clades....only highlighting before the node not the whole clade like in the book
ggtree(tree) +
geom_hilight(node=21, fill="steelblue", alpha=.6, type = "encircle") +
geom_hilight(node=17, fill="darkgreen", alpha=.6)
#highlighting specific clades....only highlighting before the node not the whole clade like in the book
ggtree(tree) +
geom_hilight(node=21, fill="steelblue", alpha=.6) +
geom_hilight(node=17, fill="darkgreen", alpha=.6)
#highlighting specific clades....only highlighting before the node not the whole clade like in the book
ggtree(tree) +
geom_hilight(node=21, fill="steelblue", alpha=.6, type="rect") +
geom_hilight(node=17, fill="darkgreen", alpha=.6)
ggtree(tree) +
geom_balance(node=16, fill='steelblue', color='white', alpha=0.6, extend=1) +
geom_balance(node=19, fill='darkgreen', color='white', alpha=0.6, extend=1)
library(tidytree)
ggtree(tree) +
geom_balance(node=16, fill='steelblue', color='white', alpha=0.6, extend=1) +
geom_balance(node=19, fill='darkgreen', color='white', alpha=0.6, extend=1)
ggtree(tree.rax, layout="circular") + geom_tiplab(aes(angle=angle), color='blue')+geom_rootedge()+geom_hilight(node=21, fill="steelblue", alpha=.6, type="rect")
#highlighting specific clades....only highlighting before the node not the whole clade like in the book
ggtree(tree) +
geom_hilight(node=21, fill="steelblue", alpha=.6, type="rect") +
geom_hilight(node=17, fill="darkgreen", alpha=.6)
set.seed(2015-12-21)
tree <- rtree(30)
p <- ggtree(tree) + xlim(NA, 8)
p + geom_cladelab(node=45, label="test label") +
geom_cladelab(node=34, label="another clade")
beast_file <- system.file("examples/MCC_FluA_H3.tree",
package="ggtree")
beast_tree <- read.beast(beast_file)
ggtree(beast_tree, mrsd="2013-01-01") + theme_tree2()
## separate the tree by host species
tip <- as.phylo(beast_tree)$tip.label
beast_tree <- groupOTU(beast_tree, tip[grep("Swine", tip)],
group_name = "host")
p <- ggtree(beast_tree, aes(color=host), mrsd="2013-01-01",
yscale = "label") +
theme_classic() + theme(legend.position='none') +
scale_color_manual(values=c("blue", "red"),
labels=c("human", "swine"))
p <- ggtree(beast_tree, aes(color=host), mrsd="2013-01-01") +
theme_classic() + theme(legend.position='none') +
scale_color_manual(values=c("blue", "red"),
labels=c("human", "swine"))
p
p <- ggtree(beast_tree, aes(color=host)) +
theme_classic() + theme(legend.position='none') +
scale_color_manual(values=c("blue", "red"),
labels=c("human", "swine"))
rax.tip <- as.phylo(tree.rax)$tip.label
tip
rax.tip
tree.rax_c <- groupOTU(tree.rax, tip[grep("mSyn", rax.tip)],
group_name = "source")
tree.rax_c <- groupOTU(tree.rax, tip[grep("mSyn", rax.tip)],
group_name = "sample.type")
ggtree(tree.rax_c, aes(color=sample.type)) +
theme_classic() + theme(legend.position='none') +
scale_color_manual(values=c("blue", "red","green"),
labels=c("Marine", "Freshwater","Both"))
tree.rax_c <- groupOTU(tree.rax, tip[grep("m", rax.tip)],
group_name = "sample.type")
ggtree(tree.rax_c, aes(color=sample.type)) +
theme_classic() + theme(legend.position='none') +
scale_color_manual(values=c("blue", "red","green"),
labels=c("Marine", "Freshwater","Both"))
tree.rax_c
beast_tree
ggtree(tree.rax_c, aes(color=sample.type)) +
theme_classic() + theme(legend.position='none') +
scale_color_manual(values=c("blue", "red"),
labels=c("Marine", "Freshwater"))
p <- ggtree(tree.rax_c, aes(color=sample.type)) + theme(legend.position='none') +
scale_color_manual(values=c("blue", "red"),
labels=c("Marine", "Freshwater"))
p
library(TDbook)
pacman::p_load(TDbook)
load `tree_anole`
load("tree_anole")
svl <- as.matrix(df_svl)
svl
View(svl)
fit <- phytools::fastAnc(tree_anole, svl, vars=TRUE, CI=TRUE)
svl <- as.matrix(df_svl)[,1]#svl is metadata?
fit <- phytools::fastAnc(tree_anole, svl, vars=TRUE, CI=TRUE)
td <- data.frame(node = nodeid(tree_anole, names(svl)),
trait = svl)
nd <- data.frame(node = names(fit$ace), trait = fit$ace)
d <- rbind(td, nd)
d$node <- as.numeric(d$node)
tree.j <- full_join(tree_anole, d, by = 'node')
p1 <- ggtree(tree, aes(color=trait), layout = 'circular',
ladderize = FALSE, continuous = 'colour', size=2) +
scale_color_gradientn(colours=c("red", 'orange', 'green', 'cyan', 'blue')) +
geom_tiplab(hjust = -.1) +
xlim(0, 1.2) +
theme(legend.position = c(.05, .85))
p1
svl <- as.matrix(df_svl)[,1]#svl is metadata?
fit <- phytools::fastAnc(tree_anole, svl, vars=TRUE, CI=TRUE)
td <- data.frame(node = nodeid(tree_anole, names(svl)),
trait = svl)
nd <- data.frame(node = names(fit$ace), trait = fit$ace)
d <- rbind(td, nd)
d$node <- as.numeric(d$node)
tree.j <- full_join(tree_anole, d, by = 'node')
p1 <- ggtree(tree, aes(color=trait), layout = 'circular',
ladderize = FALSE, continuous = 'colour', size=2) +
scale_color_gradientn(colours=c("red", 'orange', 'green', 'cyan', 'blue')) +
geom_tiplab(hjust = -.1) +
xlim(0, 1.2) +
theme(legend.position = c(.05, .85))
p1
###From textbook and gets error
p1
td
nd
tree.j <- full_join(tree_anole, d, by = 'node')
p1 <- ggtree(tree.j, aes(color=trait), layout = 'circular',
ladderize = FALSE, continuous = 'colour', size=2) +
scale_color_gradientn(colours=c("red", 'orange', 'green', 'cyan', 'blue')) +
geom_tiplab(hjust = -.1) +
xlim(0, 1.2) +
theme(legend.position = c(.05, .85))
p1
svl
svl <- as.matrix(df_svl)[,1]#svl is metadata?
df_svl
####Metadata df###################
meta <- read.csv("wc1.syn.phylo_metadata.csv")
####Metadata df###################
meta <- read.csv("wc1.syn.phylo_metadata.csv",
row.names = 1)
####Metadata df###################
meta <- read.csv("wc1.syn.phylo_metadata.csv",
row.names = 1)
meta
View(meta)
####Metadata df###################
meta <- read.csv("wc1.syn.phylo_metadata.csv",
row.names = 1)
View(meta)
siteinfo <- as.matrix(meta)[,3]
siteinfo
fit.rax <- phytools::fastAnc(tree.rax, siteinfo, vars=TRUE, CI=TRUE)
fit.rax <- phytools::fastAnc(tree.rax.1, siteinfo, vars=TRUE, CI=TRUE)
length(tree.rax.1$tip.label)
#a list
tree.rax.1 <- read.tree(file = "RAxML_bestTree.picocyano.msa.v3_1.tre")
#Error in ace(x, a, method = "pic") :
#  length of phenotypic and of phylogenetic data do not match.
length(tree.rax.1$tip.label)#78...should be 50?
ggtree(tree.rax.1, layout="circular") + geom_tiplab(aes(angle=angle), color='blue')+geom_rootedge()+geom_hilight(node=21, fill="steelblue", alpha=.6, type="rect")
#Error in ace(x, a, method = "pic") :
#  length of phenotypic and of phylogenetic data do not match.
length(tree.rax.1$tip.label)#78...should be 50?
####Metadata df###################
meta <- read.csv("wc1.syn.phylo_metadata.csv",
row.names = 1)
siteinfo <- as.matrix(meta)[,3]
fit.rax <- phytools::fastAnc(tree.rax.1, siteinfo, vars=TRUE, CI=TRUE)
lentgth(siteinfo)
length(siteinfo)
siteinfo
names(tree.rax.1$tip.label)
names(tree.rax.1$edge)
####Metadata df###################
meta <- read.csv("wc1.syn.phylo_metadata.csv",
row.names = 1)
siteinfo <- as.matrix(meta)[,3]
lentgth(siteinfo)
length(siteinfo)
####Metadata df###################
meta <- read.csv("wc1.syn.phylo_metadata.csv",
row.names = 1)
meta
siteinfo <- as.matrix(meta)[,3]
length(siteinfo)
fit.rax <- phytools::fastAnc(tree.rax.1, siteinfo, vars=TRUE, CI=TRUE)
####Metadata df###################
meta <- read.csv("wc1.syn.phylo_metadata.csv",
row.names = 1)
siteinfo <- as.matrix(meta)[,3]
length(siteinfo)
#Error in ace(x, a, method = "pic") :
#  length of phenotypic and of phylogenetic data do not match.
length(tree.rax.1$tip.label)#53...should be 50?
pico.seqs <- Biostrings::readDNAStringSet("/Users/trevo/OneDrive/Documents/GitHub/Bioinformatics/Synechoccous Phylogenetics/R/Synechoccous.phylogeny/picocyano.rep.seqs_q2.v3.txt",
format = "fasta",
use.names = TRUE)
a1 <- msa(pico.seqs, method = "Muscle")
#Error in ace(x, a, method = "pic") :
#  length of phenotypic and of phylogenetic data do not match.
length(tree.rax.1$tip.label)#53...should be 50?
pico.seqs$
a1 <- msa(pico.seqs, method = "Muscle")
#Error in ace(x, a, method = "pic") :
#  length of phenotypic and of phylogenetic data do not match.
length(tree.rax.1$tip.label)#53...should be 50?
####Metadata df###################
meta <- read.csv("wc1.syn.phylo_metadata.csv",
row.names = 1)
View(meta)
siteinfo <- as.matrix(meta)[,3]
length(siteinfo)
fit.rax <- phytools::fastAnc(tree.rax.1, siteinfo, vars=TRUE, CI=TRUE)
fit.rax <- phytools::fastAnc(tree.rax.1, siteinfo, vars=TRUE, CI=TRUE)
#a list
tree.rax.1 <- read.tree(file = "RAxML_bestTree.picocyano.msa.v3_1.tre")
fit.rax <- phytools::fastAnc(tree.rax.1, siteinfo, vars=TRUE, CI=TRUE)
pico.seqs.type <- Biostrings::readDNAStringSet("/Users/trevo/OneDrive/Documents/GitHub/Bioinformatics/Synechoccous Phylogenetics/R/Synechoccous.phylogeny/picocyano.rep.seqs_q2.type.txt",
format = "fasta",
use.names = TRUE)
a1.type <- msa(pico.seqs.type, method = "Muscle")
##convert to fasta file..with type
A1_Dat.t = msaConvert(a1.type, type="phangorn::phyDat")
write.phyDat(A1_Dat.t, "picocyano.msa.v3.type.phy", format = "phylip")
print(a1.type, show="complete")
pico.seqs.type <- Biostrings::readDNAStringSet("/Users/trevo/OneDrive/Documents/GitHub/Bioinformatics/Synechoccous Phylogenetics/R/Synechoccous.phylogeny/picocyano.rep.seqs_q2.type_trim.txt.txt",
format = "fasta",
use.names = TRUE)
pico.seqs.type <- Biostrings::readDNAStringSet("/Users/trevo/OneDrive/Documents/GitHub/Bioinformatics/Synechoccous Phylogenetics/R/Synechoccous.phylogeny/picocyano.rep.seqs_q2.type_trim.txt",
format = "fasta",
use.names = TRUE)
a1.type <- msa(pico.seqs.type, method = "Muscle")
##convert to fasta file..with type
A1_Dat.t = msaConvert(a1.type, type="phangorn::phyDat")
write.phyDat(A1_Dat.t, "picocyano.msa.v3.type.phy", format = "phylip")
print(a1.type, show="complete")#would need to trim if I use this...
#highlighting specific clades....only highlighting before the node not the whole clade like in the book
ggtree(tree) +
geom_hilight(node=21, fill="steelblue", alpha=.6, type="rect") +
geom_hilight(node=17, fill="darkgreen", alpha=.6)
#worked...
p <- ggtree(beast_tree, aes(color=host)) +
theme_classic() + theme(legend.position='none') +
scale_color_manual(values=c("blue", "red"),
labels=c("human", "swine"))
p
#Assigned samples branchs by ASV source
rax.tip <- as.phylo(tree.rax)$tip.label
tree.rax_c <- groupOTU(tree.rax, tip[grep("m", rax.tip)],
group_name = "sample.type")#
ggtree(tree.rax_c, aes(color=sample.type)) +
theme_classic() + theme(legend.position='none') +
scale_color_manual(values=c("blue", "red","green"),
labels=c("Marine", "Freshwater","Both"))
tip
rax.tip
tree.rax_c <- groupOTU(tree.rax, tip[grep("mSyn", rax.tip)],
group_name = "sample.type")#
tree.rax_c
View(tree.rax_c)
print(tree.rax_c, n= 50)
beast_tree
?groupOTU
p
#Assigned samples branchs by ASV source
rax.tip <- as.phylo(tree.rax)$tip.label
tree.rax_c <- groupOTU(tree.rax, rax.tip[grep("mSyn", rax.tip)],
group_name = "sample.type")#
ggtree(tree.rax_c, aes(color=sample.type)) +
theme_classic() + theme(legend.position='none') +
scale_color_manual(values=c("blue", "red","green"),
labels=c("Marine", "Freshwater","Both"))
tree.rax_c <- groupOTU(tree.rax, rax.tip[grep("fSyn", rax.tip)],
group_name = "sample.type")#
ggtree(tree.rax_c, aes(color=sample.type)) +
theme_classic() + theme(legend.position='none') +
scale_color_manual(values=c("blue", "red","green"),
labels=c("Marine", "Freshwater","Both"))
p1 <- ggtree(tree.j, aes(color=trait), layout = 'circular',
ladderize = FALSE, continuous = 'colour', size=2) +
scale_color_gradientn(colours=c("red", 'orange', 'green', 'cyan', 'blue')) +
geom_tiplab(hjust = -.1) +
xlim(0, 1.2) +
theme(legend.position = c(.05, .85))
p1
tree$edge
tree$Nnode
View(trees)
View(tree)
View(tree.j)
ggtree(tree.rax_c, aes(color=sample.type)) +
theme_classic() + theme(legend.position='none') +
scale_color_manual(values=c("blue", "red","green"),
labels=c("Marine", "Freshwater","Both"))
ggtree(tree.rax_c, aes(color=sample.type)) +
+ theme(legend.position='bottom') +
scale_color_manual(values=c("blue", "red","green"),
labels=c("Marine", "Freshwater","Both"))
ggtree(tree.rax_c, aes(color=sample.type)) +  theme(legend.position='none') +
scale_color_manual(values=c("blue", "red","green"),
labels=c("Marine", "Freshwater","Both"))
ggtree(tree.rax_c,layout="circular", aes(color=sample.type)) +  theme(legend.position='none') +
scale_color_manual(values=c("blue", "red","green"),
labels=c("Marine", "Freshwater","Both"))+geom_tiplab(aes(angle=angle), color='blue')
ggtree(tree.rax_c,layout="circular",size = 4, aes(color=sample.type)) +  theme(legend.position='none') +
scale_color_manual(values=c("blue", "red","green"),
labels=c("Marine", "Freshwater","Both"))+geom_tiplab(aes(angle=angle), color='blue')
ggtree(tree.rax_c,layout="circular",size = 2.5, aes(color=sample.type)) +  theme(legend.position='none') +
scale_color_manual(values=c("blue", "red","green"),
labels=c("Marine", "Freshwater","Both"))+geom_tiplab(aes(angle=angle), color='blue')
ggtree(tree.rax_c,layout="circular",size = 2.5, aes(color=sample.type)) +  theme(legend.position='none') +
scale_color_manual(values=c("blue", "red"),
labels=c("Marine", "Freshwater"))+geom_tiplab(aes(angle=angle), color='darkgray')
ggtree(tree.rax_c,layout="circular",size = 2.5, aes(color=sample.type)) +  theme(legend.position='none') +
scale_color_manual(values=c("blue", "red"),
labels=c("Marine", "Freshwater"))+geom_tiplab(aes(angle=angle), color='black')
ggtree(tree.rax_c,layout="circular",size = 2, aes(color=sample.type)) +  theme(legend.position='none') +
scale_color_manual(values=c("blue", "red"),
labels=c("Marine", "Freshwater"))+geom_tiplab(aes(angle=angle), color='black')
ggtree(tree.rax_c,layout="circular",size = 1.5, aes(color=sample.type)) +  theme(legend.position='none') +
scale_color_manual(values=c("blue", "red"),
labels=c("Marine", "Freshwater"))+geom_tiplab(aes(angle=angle), color='black')
ggtree(tree.rax_c,layout="circular",size = 1.5, aes(color=sample.type)) +  theme(legend.position='none') +
scale_color_manual(values=c("blue", "red"),
labels=c("Marine", "Freshwater"))+geom_tiplab(aes(angle=angle),size = 2, color='black')
ggtree(tree.rax_c,layout="circular",size = 1.5, aes(color=sample.type)) +  theme(legend.position='none') +
scale_color_manual(values=c("blue", "red"),
labels=c("Marine", "Freshwater"))+geom_tiplab(aes(angle=angle),size = 12, color='black')
ggtree(tree.rax_c,layout="circular",size = 1.5, aes(color=sample.type)) +  theme(legend.position='none') +
scale_color_manual(values=c("blue", "red"),
labels=c("Marine", "Freshwater"))+geom_tiplab(aes(angle=angle),size = 8, color='black')
ggtree(tree.rax_c,layout="circular",size = 1.5, aes(color=sample.type)) +  theme(legend.position='none') +
scale_color_manual(values=c("blue", "red"),
labels=c("Marine", "Freshwater"))+geom_tiplab(aes(angle=angle),size = 6, color='black')
ggtree(tree.rax_c,layout="circular",size = 1.5, aes(color=sample.type)) +  theme(legend.position='none') +
scale_color_manual(values=c("blue", "red"),
labels=c("Marine", "Freshwater"))+geom_tiplab(aes(angle=angle),size = 5.5, color='black')
ggtree(tree.rax_c,layout="circular",size = 1.5, aes(color=sample.type)) +  theme(legend.position='none') +
scale_color_manual(values=c("lightblue", "lightgreen"),
labels=c("Marine", "Freshwater"))+geom_tiplab(aes(angle=angle),size = 5.5, color='black')
ggtree(tree.rax_c,layout="circular",size = 1.5, aes(color=sample.type)) +  theme(legend.position='none') +
scale_color_manual(values=c("darkblue", "darkgreen"),
labels=c("Marine", "Freshwater"))+geom_tiplab(aes(angle=angle),size = 5.5, color='black')
ggtree(tree.rax_c,layout="circular",size = 1.5, aes(color=sample.type)) +  theme(legend.position='none') +
scale_color_manual(values=c("lightblue", "lightgreen"),
labels=c("Marine", "Freshwater"))+geom_tiplab(aes(angle=angle),size = 5.5, color='black')
ggtree(tree.rax_c,layout="circular",size = 1.5, aes(color=sample.type)) +  theme(legend.position='bottom') +
scale_color_manual(values=c("lightblue", "lightgreen"),
labels=c("Marine", "Freshwater"))+geom_tiplab(aes(angle=angle),size = 5.5, color='black')
ggtree(tree.rax_c,layout="circular",size = 1.5, aes(color=sample.type)) +  theme(legend.position='bottom', size = 3) +
scale_color_manual(values=c("lightblue", "lightgreen"),
labels=c("Marine", "Freshwater"))+geom_tiplab(aes(angle=angle),size = 5.5, color='black')
ggtree(tree.rax_c,layout="circular",size = 1.5, aes(color=sample.type)) +  theme(legend.position='bottom') +
scale_color_manual(values=c("lightblue", "lightgreen"),
labels=c("Marine", "Freshwater"))+geom_tiplab(aes(angle=angle),size = 5.5, color='black')
tree.rax.type <-read.raxml(file = "RAxML_bipartitions.picocyano.msa.v3.type_1.tre")
tree.rax.type <-read.raxml(file = "RAxML_bipartitionsBranchLabels.picocyano.msa.v3.type_1.tre")
ggtree(tree.rax_c,layout="circular",size = 1.5, aes(color=sample.type)) +  theme(legend.position='bottom') +
scale_color_manual(values=c("lightblue", "lightgreen"),
labels=c("Marine", "Freshwater"))+geom_tiplab(aes(angle=angle),size = 5.5, color='black')
#tree with type strains
ggtree(tree.rax.type,layout="circular",size = 1.5, aes(color=sample.type)) +  theme(legend.position='bottom') +
scale_color_manual(values=c("lightblue", "lightgreen"),
labels=c("Marine", "Freshwater"))+geom_tiplab(aes(angle=angle),size = 5.5, color='black')
rax.tip.t <- as.phylo(tree.rax.type)$tip.label
tree.rax_c.t <- groupOTU(tree.rax.type, rax.tip.t[grep("fSyn", rax.tip.t)],
group_name = "sample.type")#
ggtree(tree.rax_c.t,layout="circular",size = 1.5, aes(color=sample.type)) +  theme(legend.position='bottom') +
scale_color_manual(values=c("lightblue", "lightgreen"),
labels=c("Marine", "Freshwater"))+geom_tiplab(aes(angle=angle),size = 5.5, color='black')
ggtree(tree.rax.type) + geom_tiplab(aes(angle=angle), color='blue')+geom_rootedge()+geom_hilight(node=21, fill="steelblue", alpha=.6, type="rect")
rax.tip.t <- as.phylo(tree.rax.type)$tip.label
#New tree grouped by sample type
tree.rax_c.t <- groupOTU(tree.rax.type, rax.tip.t[grep("fSyn", rax.tip.t)],
group_name = "sample.type")#
ggtree(tree.rax_c.t,,size = 1, aes(color=sample.type)) +  theme(legend.position='bottom') +
scale_color_manual(values=c("lightblue", "lightgreen"),
labels=c("Marine", "Freshwater"))+geom_tiplab(aes(angle=angle),size = 5.5, color='black')
ggtree(tree.rax_c.t,layout="rectangular",size = 1.5, aes(color=sample.type)) +  theme(legend.position='bottom') +
scale_color_manual(values=c("lightblue", "lightgreen"),
labels=c("Marine", "Freshwater"))+geom_tiplab(aes(angle=angle),size = 5.5, color='black')
ggtree(tree.rax.1, layout="circular") + geom_tiplab(aes(angle=angle), color='blue')+geom_rootedge()+geom_hilight(node=21, fill="steelblue", alpha=.6, type="rect")
#tree without types
ggtree(tree.rax_c,layout="circular",size = 1.5, aes(color=sample.type)) +  theme(legend.position='bottom') +
scale_color_manual(values=c("lightblue", "lightgreen"),
labels=c("Marine", "Freshwater"))+geom_tiplab(aes(angle=angle),size = 5.5, color=sample.type)
#tree without types
ggtree(tree.rax_c,layout="circular",size = 1.5, aes(color=sample.type)) +  theme(legend.position='bottom') +
scale_color_manual(values=c("lightblue", "lightgreen"),
labels=c("Marine", "Freshwater"))+geom_tiplab(aes(angle=angle),size = 5.5, color="black")
#No type strain
pico.seqs <- Biostrings::readDNAStringSet("/Users/trevo/OneDrive/Documents/GitHub/Bioinformatics/Synechoccous Phylogenetics/R/Synechoccous.phylogeny/picocyano.rep.seqs_q2.v3.txt",
format = "fasta",
use.names = TRUE)
pacman::p_load(msa,seqinr,Biostrings,tidyverse,phangorn)
#No type strain
pico.seqs <- Biostrings::readDNAStringSet("/Users/trevo/OneDrive/Documents/GitHub/Bioinformatics/Synechoccous Phylogenetics/R/Synechoccous.phylogeny/picocyano.rep.seqs_q2.v3.txt",
format = "fasta",
use.names = TRUE)
#No type strain
pico.seqs <- Biostrings::readDNAStringSet("/Users/trevo/OneDrive/Documents/GitHub/Bioinformatics/Synechoccous Phylogenetics/R/Synechoccous.phylogeny/picocyano.rep.seqs_q2.v3.txt",
format = "fasta",
use.names = TRUE)
#with type strain
pico.seqs.type <- Biostrings::readDNAStringSet("/Users/trevo/OneDrive/Documents/GitHub/Bioinformatics/Synechoccous Phylogenetics/R/Synechoccous.phylogeny/picocyano.rep.seqs_q2.type_trim.txt",
format = "fasta",
use.names = TRUE)
#no type strains from blast 16S seq
a1 <- msa(pico.seqs, method = "Muscle")
print(a1, show="complete")
a1.type <- msa(pico.seqs.type, method = "Muscle")
print(a1.type, show="complete")#would need to trim if I use this...
#a formal class tree data
tree.rax <-read.raxml(file = "RAxML_bipartitionsBranchLabels.picocyano.msa.v3_1.tre")
#character string with asv names/tip labels
rax.tip <- as.phylo(tree.rax)$tip.label
#create "new" tree with only fSyn grouped together
tree.rax_c <- groupOTU(tree.rax, rax.tip[grep("fSyn", rax.tip)],
group_name = "sample.type")#
#Circular tree with paths
ggtree(tree.rax_c,layout="circular",size = 1.5, aes(color=sample.type)) +  theme(legend.position='bottom') +
scale_color_manual(values=c("lightblue", "lightgreen"),
labels=c("Marine", "Freshwater"))+geom_tiplab(aes(angle=angle),size = 5.5, color="black")
