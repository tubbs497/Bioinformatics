###Packages####################33
pacman::p_load(msa,Popgenome,genepop,PopGenome)
BiocManager::install("Biostrings")
###Packages####################33
pacman::p_load(msa,Popgenome,genepop,biostrings)
###Packages####################33
pacman::p_load(msa,Popgenome,genepop,seqinr)
###Packages####################33
pacman::p_load(msa,genepop,seqinr,Biostrings)
?readAAStringSet
?msa
getwd()
aom.seqs <-readDNAStringSet("/Users/trevo/OneDrive/Documents/GitHub/Bioinformatics/aom.msa.alignment/amoA.msa.fasta")
?readDNAStringSet
aom.seqs <-readDNAStringSet("/Users/trevo/OneDrive/Documents/GitHub/Bioinformatics/aom.msa.alignment/amoA.msa.fasta",
format = "fasta")
?msa
aom.alignment <- msa(aom.seqs,
method = "ClustalW")
aom.alignment <- msa(aom.seqs, method = "ClustalW")
print(aom.alignment, show="complete")
?biostrings
?Biostrings
length(aom.alignment)
sames(aom.alignment)
names(aom.alignment)
print(aom.alignment, show="complete")#13 gaps in alignment
aom.alignment[1]
aom.alignment[[1]]
alphabetFrequency(aom.alignment)
bp.freq <- alphabetFrequency(aom.alignment)
head(bp.freq)
mean(bp.freq$G)
View(bp.freq)
##install/load packages
pacman::p_load(msa,genepop,seqinr,Biostrings,tidyverse)
g = bp.freq %>% select(G)
g = bp.freq[:3]
g = bp.freq[,3]
c = bp.freq[,2]
mean(g)
mean(c)
GC = (142+126)/644
GC
aom.aline.seq = msaConvert(aom.alignment,"seqinr::alignment")
##install/load packages
pacman::p_load(msa,genepop,seqinr,Biostrings,tidyverse)
?dist.alignment
aom.dist = dist.alignment(aom.aline.seq,"identity")
aom.dist
aom.dist.mat = as.matrix(aom.dist)
View(aom.dist.mat)
?seqinr
##convert to fasta file
Alignment_aomDat = msaConvert(aom.alignment, type="phangorn::phyDat")
write.phyDat(Alignment_aomDat, "alignment.fasta", format = "fasta")
##install/load packages
pacman::p_load(msa,genepop,seqinr,Biostrings,tidyverse,phangorn)
##convert to fasta file
Alignment_aomDat = msaConvert(aom.alignment, type="phangorn::phyDat")
write.phyDat(Alignment_aomDat, "alignment.fasta", format = "fasta")
aom.translated <- translate(aom.alignment, no.init.codon = TRUE)
?`translate,DNAStringSet-method`
aom.translated <- translate(aom.seqs, no.init.codon = TRUE)
aom.translated <- translate(aom.seqs)
aom.translated <- translate(aom.seqs)
aom.translated <- translate(aom.seqs,"solve")
aom.translated <- translate(aom.seqs, genetic.code = GENETIC_CODE,"solve")
aom.translated <- translate(aom.seqs, "solve")
View(aom.seqs)
aom.translated <- translate(aom.seqs, "solve",no.init.codon = TRUE)
aom.translated <- translate(aom.seqs, "solve")
##install/load packages
pacman::p_load(msa,genepop,seqinr,Biostrings,tidyverse,phangorn)
aom.translated <- translate(aom.seqs, "solve")
aom.translated = translate_AA(aom.seqs)
aom.translated = translate(aom.seqs)
View(aom.seqs)
km04.translated = translate(aom.seqs@ranges$`KM042428.1 Uncultured marine archaeon clone SWAr-amoA-G12 AmoA (amoA) gene, partial cds`)
aom.translated = translate(aom.alignment)
?biostrings
aom.seqs2 <- Biostrings::readDNAStringSet("/Users/trevo/OneDrive/Documents/GitHub/Bioinformatics/aom.msa.alignment/amoA.msa.fasta",
format = "fasta",
use.names = TRUE)
aom.translated = translate(aom.seqs2)
aom.translated = translate(aom.seqs)
aom.translated = translate(aom.seqs)
aom.alignment <- msa(aom.seqs, method = "ClustalW")
aom.alignment
aom.translated
aom.translated = translate(aom.seqs)
aom.translated = translate(aom.seqs[2])
aom.translated
aom.translated = translate(aom.seqs[3])
?biostrings::translate
?translate
aa.aom2 = Biostrings::writeXStringSet(aom.translated)
Biostrings::writeXStringSet(aom.translated,"amino.acid_aom.fasta",
format = "fasta")
